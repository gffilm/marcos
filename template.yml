AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'Authorization,content-type'"
      AllowOrigin: "'*'"
      AllowCredentials: "'true'"
  Function:
    Environment:
      Variables:
        OPENAI_API_KEY: '{{resolve:secretsmanager:openaiapikey:SecretString:ApiKey}}'
    Timeout: 120
    MemorySize: 256
    Runtime: nodejs18.x

Resources:
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaCloudWatchPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

        - PolicyName: LambdaGeneralPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - lambda:InvokeFunction
                  - execute-api:ManageConnections
                  - execute-api:Invoke
                Resource: '*'

        - PolicyName: LambdaVPCPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: '*'

        - PolicyName: LambdaSESPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource:
                  - "arn:aws:ses:us-east-1:010928186902:identity/*"

        - PolicyName: LambdaS3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - "arn:aws:s3:::dialects/*"

  PostCompletion:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/src/app/completion
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Timeout: 120
      MemorySize: 256
      Role: !GetAtt ExecutionRole.Arn
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: PostCompletion
          DEBUG_MODE: false
      Events:
        PostCompletion:
          Type: Api
          Properties:
            Path: /completion
            Method: post

  Test:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/src/app/test
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Timeout: 120
      MemorySize: 256
      Role: !GetAtt ExecutionRole.Arn
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: Test
          DEBUG_MODE: false
      Events:
        Test:
          Type: Api
          Properties:
            Path: /test
            Method: get
